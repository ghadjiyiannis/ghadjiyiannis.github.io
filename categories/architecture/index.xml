<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on George Hadjiyiannis</title>
    <link>https://ghadjiyiannis.github.io/categories/architecture/</link>
    <description>Recent content in Architecture on George Hadjiyiannis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ghadjiyiannis.github.io/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Untyped vs. strongly typed languages</title>
      <link>https://ghadjiyiannis.github.io/blog/typed_vs_untyped_languages/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/typed_vs_untyped_languages/</guid>
      <description>In a previous article I explained why I generally do not think it is worth debating the relative merits of one computer language over another, while at the same time pointing out one major exception: whether the language in question is untyped vs. strongly typed. Unlike the other properties of a language, I believe its ability to guarantee the type of each variable in the code base is extremely important in the lifetime cost of software written in that language.</description>
    </item>
    
    <item>
      <title>Choosing Technologies</title>
      <link>https://ghadjiyiannis.github.io/blog/choosing_technologies/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/choosing_technologies/</guid>
      <description>Despite growing up in a country where football (soccer, for my American readers) is the universal passion, I never understood the appeal, and I never shared it. However, I suspect it to be similar to the passion that a discussion on technology choices evokes among software engineers and architects: despite being otherwise excessively rational beings (at least according to everyone in a different profession), we favor technologies by faith instead of reason, and we get emotionally attached to them.</description>
    </item>
    
    <item>
      <title>The case for explicit data schemas</title>
      <link>https://ghadjiyiannis.github.io/blog/explicit_data_schemas/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/explicit_data_schemas/</guid>
      <description>The software development Zeitgeist seems to be pointing away from the necessity of having explicit data schemas. Nowadays, designing a database schema, or even just an ER diagram, seems to be downright old-fashioned, and an activity that is viewed more as a burden or a restriction, rather than something of value. At the risk of being labeled a contrarian, I would like to make the case in favor of explicitly designing data schemas.</description>
    </item>
    
  </channel>
</rss>