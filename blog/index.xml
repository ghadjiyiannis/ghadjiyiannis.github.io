<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on George Hadjiyiannis</title>
    <link>https://ghadjiyiannis.github.io/blog/</link>
    <description>Recent content in Blog on George Hadjiyiannis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ghadjiyiannis.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software is hard - Part 1: Scaling</title>
      <link>https://ghadjiyiannis.github.io/blog/software_is_hard_scaling/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/software_is_hard_scaling/</guid>
      <description>A long time ago, when I was still in college, I was fortunate enough to take a Software Engineering class by Prof. John Guttag. I remember him starting one of the lectures with the question:
&amp;ldquo;Can anyone here write a 10,000 LOC program in a year?&amp;rdquo;
A large portion of the class raised their hands (this is MIT, after all). He then proceeded to ask:
&amp;ldquo;Can anyone here write a 100,000 LOC program in ten years?</description>
    </item>
    
    <item>
      <title>When Lean works against you</title>
      <link>https://ghadjiyiannis.github.io/blog/when_lean_works_against_you/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/when_lean_works_against_you/</guid>
      <description>There is an unfortunate pattern in business where, once an idea becomes successful, people try to copy it into all sort of other scenarios. I always felt like the following picture summed up nicely how everyone feels about this phenomenon, as it relates to the outcome of the Agile Manifesto:
The main problem with this pattern is that, sooner or later, people end up applying said idea to scenarios where it is not really applicable.</description>
    </item>
    
    <item>
      <title>Developers write code, Software Engineers solve problems</title>
      <link>https://ghadjiyiannis.github.io/blog/developer_vs_engineer/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/developer_vs_engineer/</guid>
      <description>A long time ago, I was in Barcelona attending an API workshop with our teams there. On the second day of the workshop, the discussion got a bit sidetracked, but it was one of those sidetracks that leads to insights that are more valuable than the main theme of the workshop. I remember the group CTO at the time declaring &amp;ldquo;Developers write code, Software Engineers solve problems!&amp;rdquo;. For some reason it struck me as such a profound statement, that I still remember it to this day as the main idea of value I got that day.</description>
    </item>
    
    <item>
      <title>It&#39;s a start!</title>
      <link>https://ghadjiyiannis.github.io/blog/its_a_start/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ghadjiyiannis.github.io/blog/its_a_start/</guid>
      <description>Well, here we go!
As is normal for a software engineer, I have often had discussions with colleagues about the best way of doing things in the field. Sometimes these were opinionated discussions of little substance, but sometimes we would reach some conclusions interesting enough to warrant capturing somewhere. While I often joked about writing a book on the topic, I have been thinking of putting together a blog for quite a while.</description>
    </item>
    
  </channel>
</rss>